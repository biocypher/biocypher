Title: BioCypher python module configuration file

## Some options are not used by default. Uncomment them to use them.

biocypher:
  ### Required parameters ###
  ## DBMS type

  dbms: neo4j

  ## Schema configuration

  # schema_config_path: config/schema_config.yaml

  ## Offline mode: do not connect to a running DBMS instance
  ## Can be used e.g. for writing batch import files

  offline: true

  ## Strict mode: do not allow to create new nodes or relationships without
  ## specifying source, version, and license parameters

  strict_mode: false

  ## Ontology configuration

  head_ontology:
    url: https://github.com/biolink/biolink-model/raw/v3.2.1/biolink-model.owl.ttl
    root_node: entity
    # switch_label_and_id: true

  ### Optional parameters ###
  ## Logging
  # Write log to disk

  log_to_disk: true

  # Activate more granular logging

  debug: true

  # Change the log directory
  # log_directory: biocypher-log

  ## Data output directory
  # output_directory: biocypher-out

  ## Resource cache directory
  # cache_directory: .cache

  ## Optional tail ontologies

  # tail_ontologies:
  #   so:
  #     url: test/ontologies/so.owl
  #     head_join_node: sequence variant
  #     tail_join_node: sequence_variant
  #     switch_label_and_id: true
  #   mondo:
  #     url: test/ontologies/mondo.owl
  #     head_join_node: disease
  #     tail_join_node: disease
  #     switch_label_and_id: true

### DBMS configuration ###

neo4j:
  ### Neo4j configuration ###
  ## Database name

  database_name: neo4j

  ## Wipe DB before import (offline mode: --force)

  wipe: true

  ## Neo4j authentication

  uri: neo4j://localhost:7687
  user: neo4j
  password: neo4j

  ## Neo4j admin import batch writer settings

  delimiter: ";"
  array_delimiter: "|"
  quote_character: "'"

  # How to write the labels in the export files.

  labels_order: "Ascending" # Default: From more specific to more generic.
  # Or:
  # labels_order: "Descending" # From more generic to more specific.
  # labels_order: "Alphabetical" # Alphabetically. Legacy option.
  # labels_order: "Leaves" # Only the more specific label.

  ## MultiDB functionality
  ## Set to false for using community edition or older versions of Neo4j

  multi_db: true

  ## Import options

  skip_duplicate_nodes: false
  skip_bad_relationships: false

  ## Import call prefixes

  # import_call_bin_prefix: bin/
  # import_call_file_prefix: path/to/files/

postgresql:
  ### PostgreSQL configuration ###
  # PostgreSQL connection credentials

  database_name: postgres # DB name
  user: postgres # user name
  password: postgres # password
  host: localhost # host
  port: 5432 # port

  # PostgreSQL import batch writer settings

  quote_character: '"'
  delimiter: '\t'
  # import_call_bin_prefix: '' # path to "psql"
  # import_call_file_prefix: '/path/to/files'

rdf:
  ### RDF configuration ###
  file_format: turtle # turtle or ttl, xml, json-ld, ntriples, n3, trig, trix or nquads

owl:
  ### OWL configuration ###
  file_format: turtle # turtle or ttl, xml, json-ld, ntriples, n3, trig, trix or nquads
  edge_model: Association # or: ObjectProperty
  file_stem: biocypher # without the extension

sqlite:
  ### SQLite configuration ###
  # SQLite connection credentials

  database_name: sqlite.db # DB name

  # SQLite import batch writer settings

  quote_character: '"'
  delimiter: '\t'
  # import_call_bin_prefix: '' # path to "sqlite3"
  # import_call_file_prefix: '/path/to/files'

csv:
  ### CSV/Pandas configuration ###
  delimiter: ","

networkx:
  ### NetworkX configuration ###
  some_config: some_value # placeholder for technical reasons TODO

metagraph:
    file_format: cytoscape.json
    file_stem: metagraph

    # Use IRI instead of BioCypher labels as IDs.
    use_IRI: False

    ### Information about encountered property values ###
    # Add annotations showing all the unique
    # values in the encountered properties.
    # WARNING: this may be a lot of values.
    property_values: True
    # If True, adds an annotation to each node and edge,
    # which value is the number of unique values encountered
    # while processing the instantiated graph.
    nb_property_values: True
    # To avoid colliding with the annotation showing
    # the actual unique values, a string is added before
    # the annotation name.
    nb_property_values_prefix: "#"
    # Translate some encountered property names
    # into another.
    # For instance, some output format engines
    # (e.g. cytoscape) are using the "id"
    # property for their own purposes.
    # This option allows to translate it to
    # "biocypher_id" to avoid collision.
    change_property_name:
        "id": "biocypher_id"

    ### Property values lists management ###
    # Some properties of the processed instantiated graph
    # may alfready be aggregation of values.
    # If set, this is used to split the property values
    # before counting them.
    split_separator: ","
    # When storing the encountered property values,
    # join them as a string with this string.
    join_separator: ","

    ### Mandatory annotations ###
    # Names of the annotations that are always attached
    # to the elements of the metagraph.
    # If unset, an error will be raised.,
    # but you can still change their name,
    # e.g. to avoid collisions with encountered
    # properties.
    keys:
        NBINS: "nb_instances"
        ISA: "is_a"
        ANCESTORS: "ancestors"
        IRI: "IRI"
