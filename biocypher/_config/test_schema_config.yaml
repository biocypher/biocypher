Title: BioCypher graph schema configuration file

# This configuration file establishes the hierarchy and connectivity in a newly
# set-up BioCypher property graph database. Naming should adhere to Biolink
# nomenclature (available at https://biolink.github.io/biolink-model/ or via
# the python module 'biolink-model-toolkit').

# The BioCypher YAML file specifies only the leaves of the hierarchy tree of
# the desired graph; the hierarchical structure of entities will be derived
# from the Biolink model. Thus, only the immediate constituents of the graph
# need to be specified in the schema config.


# ---
# "Named Things"
# ---
# The implementation of named things is fairly straightforward, since they are
# usually represented in node form, which is also the Biolink recommendation.
# The same is not true for associations.
#
# A little more complex is the representation of aggregates of named things,
# for instance in the case of functional protein complexes. These are represented
# by so-called "mixins", which are not officially part of the hierarchy.

# regular node
protein:
  represented_as: node
  preferred_id: uniprot
  label_in_input: protein
  properties:
    name: str
    score: float
    taxon: int
    genes: str[]

microRNA:
  represented_as: node
  preferred_id: mirbase.mature
  label_in_input: mirna

complex:
  synonym_for: macromolecular complex
  represented_as: node
  preferred_id: complexportal
  label_in_input: complex

# virtual leaves for multiple inputs
pathway:
  represented_as: node
  preferred_id: [reactome, wikipathways]
  label_in_input: [reactome, wikipathways]

# merge muliple inputs
gene:
  represented_as: node
  preferred_id: hgnc
  label_in_input: [hgnc, ensg]
  exclude_properties: accession

disease:
  represented_as: node
  preferred_id: doid
  label_in_input: Disease

# ad hoc child
side effect:
  is_a: phenotypic feature
  represented_as: node
  preferred_id: sider.effect
  label_in_input: sider

sequence variant:
  represented_as: node
  preferred_id: [clinically relevant, known, somatic]
  label_in_input: [Clinically_relevant_variant, Known_variant, Somatic_mutation]
  properties:
    source: str
    original_source: str
    effect: str
    biotype: str

altered gene product level:
  represented_as: node
  label_in_input: agpl

decreased gene product level:
  represented_as: node
  label_in_input: agpl_decreased

lethal variant:
  represented_as: node
  label_in_input: lethal

# virtual leaves of ad hoc child
snRNA sequence:
  is_a: nucleic acid entity
  represented_as: node
  preferred_id: [intact, rnacentral]
  label_in_input: [intact_snrna, rnacentral_snrna]
  properties:
    ac: str
    fullName: str
    shortName: str
    preferredName: str
  exclude_properties: sequence

DNA sequence:
  is_a: nucleic acid entity
  represented_as: node
  preferred_id: ensembl
  label_in_input: dna
  properties:
    ac: str
    fullName: str
    shortName: str
    preferredName: str
    sequence: str

# virtual leaves of ad hoc multiple inheritance
dsDNA sequence:
  is_a: [DNA sequence, nucleic acid entity]
  inherit_properties: True
  represented_as: node
  preferred_id: [intact, uniparc]
  label_in_input: [intact_dsdna, uniprot_archive_dsdna]


# ---
# Associations
# ---
# Associations are not supposed to be represented in node form as per the
# specifications of Biolink. However, in an analytic context, it often makes
# sense to represent interactions as nodes in Neo4j, because it enables, for
# instance, the annotation of a relationship with a publication as source of
# evidence (also known as reification in the knowledge graph world).

# The Biolink specifications for these types of relationships do
# not go into depth; for example, the hierarchy for molecular interactions
# (ie, "associations") ends at "PairwiseMolecularInteraction", there are no
# explicit terms for protein-protein-interaction, phosphorylation, miRNA-
# targeting, etc. Biolink proposes to use interaction identifiers from
# ontologies, such as https://www.ebi.ac.uk/ols/ontologies/mi/.


# added to custom biolink
post translational interaction:
  is_a: pairwise molecular interaction
  represented_as: node
  label_as_edge: INTERACTS_POST_TRANSLATIONAL
  label_in_input: post_translational

# auto label as edge
phosphorylation:
  is_a: post translational interaction
  represented_as: edge
  label_in_input: phosphorylation

# merge edges
gene to disease association:
  represented_as: edge
  label_as_edge: PERTURBED_IN_DISEASE
  label_in_input: [protein_disease, gene_disease]
  exclude_properties: accession

# multiple inheritance
mutation to tissue association:
  is_a: [genotype to tissue association, entity to tissue association, association]
  represented_as: edge
  label_as_edge: Is_Mutated_In
  label_in_input: Gene_Is_Mutated_In_Cell_Tissue


# multiple input to multiple virtual leaves
variant to gene association: # -> Known.... and Somatic....
  represented_as: edge
  source: [known.sequence variant, somatic.sequence variant]
  target: gene
  label_in_input: [
    VARIANT_FOUND_IN_GENE_Known_variant_Gene,
    VARIANT_FOUND_IN_GENE_Somatic_mutation_Gene
  ]

# property filter
gene to gene association:
  represented_as: edge
  label_in_input: gene_gene
  properties:
    directional: bool
    curated: bool
    score: float

gene to variant association:
  is_a: gene to variant association
  represented_as: edge
  label_in_input: gene_variant
